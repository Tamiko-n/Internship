#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Task {
public:
    string description;
    bool isCompleted;

    Task(const string& desc) : description(desc), isCompleted(false) {}
};

class ToDoList {
private:
    vector<Task> tasks;

public:
    void addTask();
    void markTaskCompleted();
    void viewTasks() const;
};

void ToDoList::addTask() {
    cin.ignore(); // To ignore the leftover newline character from previous input
    string description;
    cout << "Enter the task description: ";
    getline(cin, description);
    tasks.push_back(Task(description));
    cout << "Task added successfully!\n";
}

void ToDoList::markTaskCompleted() {
    if (tasks.empty()) {
        cout << "No tasks available to mark as completed.\n";
        return;
    }

    int taskNumber;
    cout << "Enter the task number to mark as completed: ";
    cin >> taskNumber;

    if (taskNumber <= 0 || taskNumber > tasks.size()) {
        cout << "Invalid task number.\n";
    } else {
        tasks[taskNumber - 1].isCompleted = true;
        cout << "Task marked as completed.\n";
    }
}

void ToDoList::viewTasks() const {
    if (tasks.empty()) {
        cout << "No tasks available.\n";
        return;
    }

    cout << "Current Tasks:\n";
    for (size_t i = 0; i < tasks.size(); ++i) {
        cout << i + 1 << ". " << tasks[i].description;
        if (tasks[i].isCompleted) {
            cout << " [Completed]";
        }
        cout << "\n";
    }
}

int main() {
    ToDoList toDoList;
    int choice;

    while (true) {
        cout << "To-Do List Application\n";
        cout << "1. Add Task\n";
        cout << "2. Mark Task as Completed\n";
        cout << "3. View Tasks\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                toDoList.addTask();
                break;
            case 2:
                toDoList.markTaskCompleted();
                break;
            case 3:
                toDoList.viewTasks();
                break;
            case 4:
                cout << "Exiting application...\n";
                return 0;
            default:
                cout << "Invalid choice. Please try again.\n";
                break;
        }
    }
}
